// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipes Recipe[]
  ratings Rating[]
  comments Comment[]

  @@map("users")
}

model Recipe {
  id          String   @id @default(cuid())
  title       String
  description String
  image       String?
  prepTime    Int      // in minutes
  cookTime    Int      // in minutes
  servings    Int
  difficulty  Difficulty
  instructions String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  ingredients RecipeIngredient[]
  ratings     Rating[]
  comments    Comment[]
  categories  RecipeCategory[]

  @@map("recipes")
}

model Ingredient {
  id   String @id @default(cuid())
  name String @unique

  recipes RecipeIngredient[]

  @@map("ingredients")
}

model RecipeIngredient {
  id       String @id @default(cuid())
  quantity String
  unit     String?

  recipeId     String
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredientId String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@map("recipe_ingredients")
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipes RecipeCategory[]

  @@map("categories")
}

model RecipeCategory {
  recipeId   String
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([recipeId, categoryId])
  @@map("recipe_categories")
}

model Rating {
  id    String @id @default(cuid())
  value Int    @db.SmallInt // 1-5 stars
  createdAt DateTime @default(now())

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@map("ratings")
}

model Comment {
  id      String @id @default(cuid())
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("comments")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
